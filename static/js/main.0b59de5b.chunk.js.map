{"version":3,"sources":["state/hooks.ts","assets/icons/Paper.svg","assets/icons/Rock.svg","assets/icons/Scissors.svg","assets/icons/Lizard.svg","assets/icons/Spock.svg","state/reducers/gameSlice.ts","assets/chars/char_01.jpg","assets/chars/char_02.jpg","assets/chars/char_03.jpg","assets/chars/char_04.jpg","assets/chars/char_05.jpg","state/reducers/modalSlice.tsx","components/Modals/ModalStart.tsx","components/Button/Button.tsx","assets/pc.png","components/Modals/ModalEnd.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","gamesPlayedCounter","characters","id","name","image","playerCharacter","score","player","computer","participantChoice","computerChoice","symbols","rock","paper","scissors","lizard","spock","randomIndex","gameSlice","createSlice","reducers","incrementGamesPlayedCounter","state","setPlayerCharacter","action","payload","incrementPlayerScore","incrementComputerScore","resetScore","generateRandomIndex","newRandomIndex","Math","floor","random","length","setParticipantChoice","setComputerChoice","reducer","actions","modalSlice","modalStart","modalEnd","changeModalStartVisibility","changeModalEndVisibility","ModalStart","modalIsOpen","reduxStore","modal","gameCharacters","game","dispatch","className","map","item","onClick","src","alt","Button","backgroundColor","children","style","ModalEnd","modalEndIsOpen","href","target","rel","App","reduxState","pcChoice","modalStartIsOpen","chosenCharacter","useState","radioInputValue","setRadioInputValue","activeSymbolClass","setActiveSymbolClass","filteredSymbol","filter","index","increasePlayerScore","useEffect","value","undefined","console","log","playGame","pcPicture","checked","onChange","e","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","gameReducer","modalReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b59de5b.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export default __webpack_public_path__ + \"static/media/Paper.58cbc834.svg\";","export default __webpack_public_path__ + \"static/media/Rock.019d06b3.svg\";","export default __webpack_public_path__ + \"static/media/Scissors.a9ff850e.svg\";","export default __webpack_public_path__ + \"static/media/Lizard.1251d61e.svg\";","export default __webpack_public_path__ + \"static/media/Spock.de13e597.svg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../store';\nimport paper from '../../assets/icons/Paper.svg';\nimport rock from '../../assets/icons/Rock.svg';\nimport scissors from '../../assets/icons/Scissors.svg';\nimport lizard from '../../assets/icons/Lizard.svg';\nimport spock from '../../assets/icons/Spock.svg';\nimport characterOne from '../../assets/chars/char_01.jpg';\nimport characterTwo from '../../assets/chars/char_02.jpg';\nimport characterThree from '../../assets/chars/char_03.jpg';\nimport characterFour from '../../assets/chars/char_04.jpg';\nimport characterFive from '../../assets/chars/char_05.jpg';\nimport { FilteredSymbolType } from '../../App';\n\ntype GameState = {\n  gamesPlayedCounter: number,\n  characters:\n    {\n      id: number,\n      name: string,\n    image: string,\n    }[],\n  playerCharacter: {\n    name: string,\n    image: string,\n  },\n  score: {\n    player: number,\n    computer: number,\n  },\n  participantChoice: string,\n  computerChoice:\n    {\n      name: string,\n      image: string,\n    }\n  symbols: {\n    name: string,\n    image: string,\n  }[],\n  randomIndex: number,\n}\n\nconst initialState: GameState = {\n  gamesPlayedCounter: 0,\n  characters: [\n    {\n      id: 1,\n      name: 'Sam',\n      image: characterOne,\n    },\n    {\n      id: 2,\n      name: 'Cory',\n      image: characterTwo,\n    },\n    {\n      id: 3,\n      name: 'Slash',\n      image: characterThree,\n    },\n    {\n      id: 4,\n      name: 'Buzz',\n      image: characterFour,\n    },\n    {\n      id: 5,\n      name: 'Tim',\n      image: characterFive,\n    }],\n  playerCharacter: {\n    name: '',\n    image: '',\n  },\n  score: {\n    player: 0,\n    computer: 0,\n  },\n  participantChoice: 'ParticipantTEStChoice',\n  computerChoice: {\n    name: '',\n    image: '',\n  },\n  symbols: [{\n    name: 'rock',\n    image: rock,\n  },\n  {\n    name: 'paper',\n    image: paper,\n  },\n  {\n    name: 'scissors',\n    image: scissors,\n  },\n  {\n    name: 'lizard',\n    image: lizard,\n  },\n  {\n    name: 'spock',\n    image: spock,\n  }],\n  randomIndex: -1,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    incrementGamesPlayedCounter: (state) => {\n      state.gamesPlayedCounter += 1;\n    },\n    setPlayerCharacter: (state, action) => {\n      state.playerCharacter = action.payload;\n    },\n    incrementPlayerScore: (state) => {\n      state.score.player += 1;\n    },\n    incrementComputerScore: (state) => {\n      state.score.computer += 1;\n    },\n    resetScore: (state) => {\n      state.score.computer = 0;\n      state.score.player = 0;\n    },\n    generateRandomIndex: (state) => {\n      const newRandomIndex = Math.floor(Math.random() * state.symbols.length);\n      state.randomIndex = newRandomIndex;\n    },\n    setParticipantChoice: (state, action) => {\n      state.participantChoice = action.payload;\n    },\n    setComputerChoice: (state, action) => {\n      state.computerChoice = action.payload;\n    },\n  },\n});\n\n// Action creators are generated for each case reducer function\nexport const { reducer } = gameSlice;\nexport const {\n  incrementGamesPlayedCounter, setPlayerCharacter, incrementPlayerScore,\n  incrementComputerScore, resetScore, generateRandomIndex, setParticipantChoice, setComputerChoice,\n} = gameSlice.actions;\n","export default __webpack_public_path__ + \"static/media/char_01.903b9ead.jpg\";","export default __webpack_public_path__ + \"static/media/char_02.4623564b.jpg\";","export default __webpack_public_path__ + \"static/media/char_03.ad864220.jpg\";","export default __webpack_public_path__ + \"static/media/char_04.1d107df3.jpg\";","export default __webpack_public_path__ + \"static/media/char_05.0dfe79c4.jpg\";","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ntype ModalsState = {\n  modalStart: boolean,\n  modalEnd: boolean,\n}\n\nconst initialState: ModalsState = {\n  modalStart: true,\n  modalEnd: false,\n};\n\nexport const modalSlice = createSlice({\n  name: 'modals',\n  initialState,\n  reducers: {\n    changeModalStartVisibility: (state, { payload }: PayloadAction<boolean>) => {\n      state.modalStart = payload;\n    },\n    changeModalEndVisibility: (state, { payload }: PayloadAction<boolean>) => {\n      state.modalEnd = payload;\n    },\n  },\n});\n\nexport const { reducer } = modalSlice;\nexport const { changeModalStartVisibility, changeModalEndVisibility } = modalSlice.actions;\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../state/hooks';\nimport './ModalStart.scss';\nimport { changeModalStartVisibility } from '../../state/reducers/modalSlice';\nimport { setPlayerCharacter } from '../../state/reducers/gameSlice';\n\nexport type CharacterType = {\n  name: string,\n  image: string,\n}\n\nconst ModalStart = () => {\n  const modalIsOpen = useAppSelector((reduxStore) => reduxStore.modal.modalStart);\n  const gameCharacters = useAppSelector((reduxStore) => reduxStore.game.characters);\n  const chosenCharacter = useAppSelector((reduxStore) => reduxStore.game.playerCharacter);\n  const dispatch = useAppDispatch();\n\n  const closeModalHandler = () => {\n    dispatch(changeModalStartVisibility(false));\n  };\n\n  const setCharacter = (value: CharacterType) => {\n    dispatch(setPlayerCharacter(value));\n  };\n\n  return (\n    <div\n      className={modalIsOpen ? 'modal active' : 'modal'}\n    >\n      <div className=\"modal__content-one\">\n        <h1 className=\"heading\">\n          <span className=\"heading--introduction\">\n            Hello and welcome to the game of\n            {' '}\n          </span>\n          <div>Rock, Paper, Scissors, Lizard, Spock</div>\n\n        </h1>\n      </div>\n      <div\n        className=\"modal__content-two\"\n      >\n        <section className=\"paragraph\">\n          The rules are simple:\n          <br />\n          <br />\n          <p className=\"paragraph__item\">\n            scissors cuts paper, paper covers rock, rock crushes lizard,\n            lizard poisons Spock, Spock smashes scissors, scissors decapitates lizard,\n            lizard eats paper, paper disproves Spock, Spock vaporizes rock,\n            and as it always has, rock crushes scissors.\n          </p>\n          <br />\n          But you don&#39;t have to memorize them - if you win, we&#39;ll tell you.\n        </section>\n      </div>\n      <div className=\"modal__content-three\">\n        <p>\n          Please, choose your character to start the game.\n        </p>\n        <span className=\"character--container\">\n          {gameCharacters.map((item) => (\n            <span\n              key={item.id}\n              className=\"character\"\n              onClick={() => {\n                setCharacter(item);\n                closeModalHandler();\n              }}\n            >\n              <img src={item.image} alt={item.name} className=\"character-image\" />\n              <span>{item.name}</span>\n            </span>\n          ))}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalStart;\n","import React, { FC } from 'react';\nimport './Button.scss';\n\ntype ButtonProps = {\n  backgroundColor: string,\n  onClick: () => void,\n}\n\nconst Button:FC<ButtonProps> = ({ onClick, backgroundColor, children }) => (\n  <div className=\"text-box\">\n    <button\n      style={{ backgroundColor }}\n      className=\"button-component\"\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  </div>\n);\n\nexport default Button;\n","export default __webpack_public_path__ + \"static/media/pc.7b2f431c.png\";","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../state/hooks';\nimport './ModalEnd.scss';\nimport { changeModalEndVisibility } from '../../state/reducers/modalSlice';\nimport Button from '../Button/Button';\nimport { resetScore } from '../../state/reducers/gameSlice';\n\nconst ModalEnd = () => {\n  const score = useAppSelector((reduxStore) => reduxStore.game.score);\n  const modalEndIsOpen = useAppSelector((reduxStore) => reduxStore.modal.modalEnd);\n  const dispatch = useAppDispatch();\n\n  const changeModalVisibilityHandler = () => {\n    dispatch(changeModalEndVisibility(false));\n  };\n\n  const resetScoreHandler = () => {\n    dispatch(resetScore());\n  };\n\n  return (\n    <div\n      className={modalEndIsOpen ? 'modal active' : 'modal'}\n    >\n\n      <div className=\"modal__content\">\n        <p>\n          {score.computer >= 3 ? (<span>Sorry, you lost.</span>) : (<span>Congratulations! You won!</span>)}\n          <br />\n          Want to try again?\n        </p>\n        <Button\n          backgroundColor=\"teal\"\n          onClick={() => {\n            changeModalVisibilityHandler();\n            resetScoreHandler();\n          }}\n        >\n          Yeah, sure\n        </Button>\n        <div className=\"credits\">\n          <span>\n            Icon credits:\n            {' '}\n            <a href=\"https://github.com/JLChamberlain/RPSLS\" target=\"_blank\" className=\"link\" rel=\"noreferrer\">https://github.com/JLChamberlain/RPSLS</a>\n          </span>\n          <span>\n            Character credits:\n            {' '}\n            <a href=\"http://www.cescgrane.com\" target=\"_blank\" className=\"link\" rel=\"noreferrer\">http://www.cescgrane.com</a>\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModalEnd;\n","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport './App.scss';\nimport { useAppSelector, useAppDispatch } from './state/hooks';\nimport {\n  generateRandomIndex,\n  setComputerChoice,\n  setParticipantChoice,\n  incrementPlayerScore,\n  incrementComputerScore,\n  incrementGamesPlayedCounter,\n} from './state/reducers/gameSlice';\nimport ModalStart from './components/Modals/ModalStart';\nimport Button from './components/Button/Button';\nimport pcPicture from './assets/pc.png';\nimport { changeModalEndVisibility } from './state/reducers/modalSlice';\nimport ModalEnd from './components/Modals/ModalEnd';\n\nexport type FilteredSymbolType = {\n  name: string,\n  image: string,\n}\n\nconst App = () => {\n  const symbols = useAppSelector((reduxState) => reduxState.game.symbols);\n  const randomIndex = useAppSelector((reduxState) => reduxState.game.randomIndex);\n  const score = useAppSelector((reduxState) => reduxState.game.score);\n  const participantChoice = useAppSelector((reduxState) => reduxState.game.participantChoice);\n  const pcChoice = useAppSelector((reduxState) => reduxState.game.computerChoice);\n  const modalStartIsOpen = useAppSelector((reduxState) => reduxState.modal.modalStart);\n  const chosenCharacter = useAppSelector((reduxStore) => reduxStore.game.playerCharacter);\n  const gamesPlayed = useAppSelector((reduxStore) => reduxStore.game.gamesPlayedCounter);\n  const modalEndIsOpen = useAppSelector((reduxStore) => reduxStore.modal.modalEnd);\n\n  const [radioInputValue, setRadioInputValue] = useState('');\n  const [activeSymbolClass, setActiveSymbolClass] = useState<boolean>();\n\n  const filteredSymbol = symbols.filter((item, index) => index === randomIndex);\n\n  const dispatch = useAppDispatch();\n\n  const generateIndex = () => {\n    dispatch(generateRandomIndex());\n  };\n\n  const setPlayerChoice = (value: string) => {\n    dispatch(setParticipantChoice(value));\n  };\n\n  const setPCChoice = (value: FilteredSymbolType) => {\n    dispatch(setComputerChoice(value));\n  };\n\n  const increasePlayerScore = () => {\n    dispatch(incrementPlayerScore());\n  };\n\n  const increaseComputerScore = () => {\n    dispatch(incrementComputerScore());\n  };\n\n  const setGamesPlayed = () => {\n    dispatch(incrementGamesPlayedCounter());\n  };\n\n  const setModalEndVisible = (value: boolean) => {\n    dispatch(changeModalEndVisibility(value));\n  };\n\n  useEffect(() => {\n    setPCChoice(filteredSymbol[0]);\n  }, [randomIndex]);\n\n  useEffect(() => {\n    if (pcChoice !== undefined && participantChoice !== undefined) {\n      if (participantChoice === pcChoice.name) {\n        console.log('it\\'s a tie');\n      } else if (participantChoice === 'scissors' && (pcChoice.name === 'paper' || pcChoice.name === 'lizard')) {\n        increasePlayerScore();\n      } else if (participantChoice === 'paper' && (pcChoice.name === 'rock' || pcChoice.name === 'spock')) {\n        increasePlayerScore();\n      } else if (\n        participantChoice === 'rock' && (pcChoice.name === 'scissors' || pcChoice.name === 'lizard')) {\n        increasePlayerScore();\n      } else if (\n        participantChoice === 'lizard' && (pcChoice.name === 'paper' || pcChoice.name === 'spock')) {\n        increasePlayerScore();\n      } else if (\n        participantChoice === 'spock' && (pcChoice.name === 'rock' || pcChoice.name === 'scissors')) {\n        increasePlayerScore();\n      } else if (!participantChoice || !pcChoice.name) {\n        console.log('');\n      } else {\n        increaseComputerScore();\n      }\n    }\n  }, [pcChoice]);\n\n  useEffect(() => {\n    if (score.player >= 3 || score.computer >= 3) {\n      setModalEndVisible(true);\n    }\n  }, [score]);\n\n  const playGame = () => {\n    generateIndex();\n    setPlayerChoice(radioInputValue);\n    setGamesPlayed();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-container\">\n        <div>\n          <div>\n            <div className=\"header\">\n              <div className=\"score\">\n                <div>\n                  Player score:\n                  {' '}\n                  {score.player}\n                </div>\n                <div>\n                  Computer score:\n                  {' '}\n                  {score.computer}\n                </div>\n              </div>\n            </div>\n            <div className=\"competitor-section\">\n              <div className=\"hero-section\">\n                <div className=\"character-image--cropper\">\n                  <img src={chosenCharacter.image} alt={chosenCharacter.name} className=\"chosen-character-image\" />\n                </div>\n                <div className=\"hero-section--name\">{chosenCharacter.name}</div>\n              </div>\n              <div className=\"pc-section\">\n                <div className=\"character-image--cropper\">\n                  <img src={pcPicture} alt=\"pc\" className=\"pc-image\" />\n                </div>\n                <div className=\"pc-section--name\">\n                  Hal\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"symbols\">\n            {pcChoice === undefined ? (\n              <div\n                className=\"pc-choice-container\"\n              />\n            ) : (\n              <div\n                key={pcChoice.name}\n                className=\"pc-choice-container\"\n              >\n                <img src={pcChoice.image} alt=\"{item}\" className=\"chosen-symbol chosen-symbol--pc\" />\n              </div>\n            )}\n          </div>\n          <div className=\"symbols\">\n            {symbols.map((item) => (\n              <div\n                key={item.name}\n                // @ts-ignore\n                checked={activeSymbolClass}\n                value={radioInputValue}\n                onChange={(e:ChangeEvent<HTMLInputElement>) => {\n                  setRadioInputValue(e.target.value);\n                  setActiveSymbolClass(e.target.checked);\n                }}\n              >\n                <div>\n                  <label>\n                    <input type=\"radio\" name=\"symbol\" value={item.name} className=\"radio\" />\n                    <div className=\"symbol-container\">\n                      <img src={item.image} alt=\"{item}\" className={(item.name === radioInputValue && activeSymbolClass) ? 'chosen-symbol chosen-symbol--active' : 'chosen-symbol'} />\n                    </div>\n                  </label>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <Button\n          backgroundColor=\"#C3073F\"\n          onClick={() => {\n            playGame();\n          }}\n        >\n          Battle!\n        </Button>\n        {modalStartIsOpen && (<ModalStart />)}\n        {modalEndIsOpen && (<ModalEnd />)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer as gameReducer } from './reducers/gameSlice';\nimport { reducer as modalReducer } from './reducers/modalSlice';\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer,\n    modal: modalReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './state/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}